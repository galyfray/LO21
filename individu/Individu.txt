
Definition du type Bits
#Type Bits
#constructeur:
#|bits_rinit:->Bits,initalise l'élément Bits avec aléatoirement pour valeur 0 ou 1 sans suivant
#Observateurs et fonctions d’accès
#|bits_val  :Bits -> Bit  ,permet d'accédé a la valeur de Bits
#|bits_next :Bits -> Bits ,permet d'accédé a l'élément suivant
#Fin Type

Definition du type BitsList:
#Type BitsList(Bits)
#constructeur:
#|créer         :                 ->BitsList, créer une liste vide
#|bitslist_ajoutert : BitsList x Bits ->BitsList, ajoute un Bits en tête de liste
#|bitslist_ajouterq : BitsList x Bits ->BitsList, ajoute un Bits en fin de liste
#Observateurs et fonctions d’accès
#|bitslist_head :BitsList -> Bits   ,permet d'accédé a la première place de la liste
#|bitslist_toint:BitsList -> entier ,décode la liste de Bits et donne la valeur entère correspondante
#Fin Type

Données:
lenth un entier décrivant la longeur de la liste chainer de Bits a produire
Résultat:
liste une BitsList

fonction bitslist_rinit(entier lenth) BitsList //itérative
Début
|BitsList liste <- créer()
|pour i de 1 à lenth faire
||bitslist_ajoutert(liste,bits_rinit())
|fait
|bitslist_rinit<-liste
Fin

fonction bitslist_rinit(entier lenth) BitsList //récurcive
Début
|Si lenth <= 0 alors
||bitslist_rinit <- créer()
|Sinon
||bitslist_rinit <- bitslist_ajouterq(bits_rinit(lenth-1),bit_rinit())
|Fin Si
Fin

Données
liste un Bits dont ont doit décodée la valeur les Bits le composant sont ranger par ordre de puissance croissante
Résultat
value un entier valeur extraite de liste

fonction bitslist_toint(BitsList liste) entier
Début
|entier pow <- 1
|entier value <- 0
|Bits elem <-bits_head(liste)
|tant que elem /= indéfini faire 
||value <- value + pow*bits_val(elem)
||pow <- pow*2
||elem <- bits_next(elem)
|Fait
|bitslist_toint <- value
Fin
